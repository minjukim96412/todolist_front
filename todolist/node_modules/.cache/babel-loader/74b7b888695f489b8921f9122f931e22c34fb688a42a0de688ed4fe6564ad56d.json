{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minju\\\\git\\\\todolist_front\\\\todolist\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleLogin } from '@react-oauth/google';\nimport KakaoLogin from 'react-kakao-login'; // 카카오 로그인 컴포넌트\nimport axios from 'axios'; // axios 임포트\nimport { useNavigate } from 'react-router-dom'; // 페이지 이동을 위한 hook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [isNicknameModalOpen, setNicknameModalOpen] = useState(false); // 닉네임 입력창 상태\n  const [userInfo, setUserInfo] = useState(null); // 로그인 후 사용자 정보 저장\n  const [nickname, setNickname] = useState(''); // 사용자 닉네임\n  const navigate = useNavigate(); // 페이지 이동을 위한 hook\n\n  // Google 로그인 성공 시 호출되는 함수\n  const handleGoogleLoginSuccess = async response => {\n    console.log('Google Login Success:', response);\n\n    // 구글 토큰을 URL-safe base64에서 일반 base64로 변환\n    const base64Url = response.credential.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const decoded = JSON.parse(atob(base64)); // 구글 토큰 디코딩\n    console.log(decoded);\n    const email = decoded.email; // 이메일\n    const tokenId = decoded.sub;\n    try {\n      // 사용자 정보 확인 요청\n      const result = await axios.post('http://localhost:8888/api/login/check-user', {\n        email,\n        provider: 'google'\n      }, {\n        withCredentials: true\n      });\n      if (result.data.exists) {\n        // 이미 가입된 사용자라면 캘린더 페이지로 이동\n        alert('기존 회원입니다. 캘린더로 이동합니다.');\n        navigate('/calendar'); // 캘린더 페이지로 이동\n      } else {\n        // 신규 사용자라면 닉네임 입력 창 띄우기\n        setUserInfo({\n          email,\n          tokenId,\n          provider: 'google'\n        });\n        setNicknameModalOpen(true);\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      alert('로그인에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // Google 로그인 실패 시 호출되는 함수\n  const handleGoogleLoginFailure = error => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\n  };\n\n  // Kakao 로그인 성공 시 호출되는 함수\n  const handleKakaoLoginSuccess = async response => {\n    console.log('Kakao Login Success:', response);\n    const email = response.response.email;\n    try {\n      // 사용자 정보 확인 요청\n      const result = await axios.post('http://localhost:8888/api/login/check-user', {\n        email,\n        provider: 'kakao'\n      }, {\n        withCredentials: true\n      });\n      if (result.data.exists) {\n        // 이미 가입된 사용자라면 캘린더 페이지로 이동\n        alert('기존 회원입니다. 캘린더로 이동합니다.');\n        navigate('/calendar'); // 캘린더 페이지로 이동\n      } else {\n        // 신규 사용자라면 닉네임 입력 창 띄우기\n        const nickname = response.response.properties.nickname;\n        setUserInfo({\n          email,\n          provider: 'kakao',\n          nickname\n        });\n        setNicknameModalOpen(true);\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      alert('로그인에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // Kakao 로그인 실패 시 호출되는 함수\n  const handleKakaoLoginFailure = error => {\n    console.error('Kakao Login Failed:', error);\n    alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\n  };\n\n  // 닉네임 중복 검사 및 사용자 정보 저장\n  const handleNicknameSubmit = async () => {\n    try {\n      // 닉네임 중복 검사\n      const result = await axios.post('http://localhost:8888/api/login/check-nickname', {\n        nickname\n      }, {\n        withCredentials: true\n      });\n      if (result.data.exists) {\n        alert('이미 사용 중인 닉네임입니다. 다른 닉네임을 선택하세요.');\n      } else {\n        // 중복되지 않으면 사용자 정보 저장\n        const userData = {\n          ...userInfo,\n          nickname\n        };\n        if (userInfo.provider === 'google') {\n          await axios.post('http://localhost:8888/api/login/google', userData);\n        } else if (userInfo.provider === 'kakao') {\n          await axios.post('http://localhost:8888/api/login/kakao', userData);\n        }\n        alert('회원가입이 완료되었습니다.');\n        setNicknameModalOpen(false); // 닉네임 입력창 닫기\n        navigate('/calendar'); // 캘린더 페이지로 이동\n      }\n    } catch (error) {\n      console.error('Error saving nickname:', error);\n      alert('회원가입에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // 닉네임 입력 변경 핸들러\n  const handleNicknameChange = event => {\n    setNickname(event.target.value);\n  };\n\n  // 카카오 SDK 초기화\n  useEffect(() => {\n    if (window.Kakao) {\n      window.Kakao.init('ae86decbc5071f303518b916484a7076'); // 카카오 REST API 키\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleGoogleLoginSuccess,\n      onError: handleGoogleLoginFailure,\n      theme: \"outline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KakaoLogin, {\n      jsKey: \"ae86decbc5071f303518b916484a7076\",\n      onSuccess: handleKakaoLoginSuccess,\n      onFailure: handleKakaoLoginFailure,\n      buttonText: \"Kakao Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), isNicknameModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nickname-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uB2C9\\uB124\\uC784\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: nickname,\n        onChange: handleNicknameChange,\n        placeholder: \"\\uB2C9\\uB124\\uC784\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNicknameSubmit,\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNicknameModalOpen(false),\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"V7M0vT+ViyiTfoLqvwnx+5l/pKU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useEffect","GoogleLogin","KakaoLogin","axios","useNavigate","jsxDEV","_jsxDEV","LoginPage","_s","isNicknameModalOpen","setNicknameModalOpen","userInfo","setUserInfo","nickname","setNickname","navigate","handleGoogleLoginSuccess","response","console","log","base64Url","credential","split","base64","replace","decoded","JSON","parse","atob","email","tokenId","sub","result","post","provider","withCredentials","data","exists","alert","error","handleGoogleLoginFailure","handleKakaoLoginSuccess","properties","handleKakaoLoginFailure","handleNicknameSubmit","userData","handleNicknameChange","event","target","value","window","Kakao","init","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","theme","jsKey","onFailure","buttonText","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/minju/git/todolist_front/todolist/src/Login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport KakaoLogin from 'react-kakao-login'; // 카카오 로그인 컴포넌트\r\nimport axios from 'axios'; // axios 임포트\r\nimport { useNavigate } from 'react-router-dom'; // 페이지 이동을 위한 hook\r\n\r\nconst LoginPage = () => {\r\n  const [isNicknameModalOpen, setNicknameModalOpen] = useState(false); // 닉네임 입력창 상태\r\n  const [userInfo, setUserInfo] = useState(null); // 로그인 후 사용자 정보 저장\r\n  const [nickname, setNickname] = useState(''); // 사용자 닉네임\r\n  const navigate = useNavigate(); // 페이지 이동을 위한 hook\r\n\r\n  // Google 로그인 성공 시 호출되는 함수\r\n  const handleGoogleLoginSuccess = async (response) => {\r\n    console.log('Google Login Success:', response);\r\n\r\n    // 구글 토큰을 URL-safe base64에서 일반 base64로 변환\r\n    const base64Url = response.credential.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const decoded = JSON.parse(atob(base64)); // 구글 토큰 디코딩\r\n    console.log(decoded);\r\n    const email = decoded.email; // 이메일\r\n    const tokenId = decoded.sub;\r\n\r\n    try {\r\n      // 사용자 정보 확인 요청\r\n      const result = await axios.post(\r\n        'http://localhost:8888/api/login/check-user',\r\n        { email, provider: 'google' },\r\n        { withCredentials: true }\r\n      );\r\n\r\n      if (result.data.exists) {\r\n        // 이미 가입된 사용자라면 캘린더 페이지로 이동\r\n        alert('기존 회원입니다. 캘린더로 이동합니다.');\r\n        navigate('/calendar'); // 캘린더 페이지로 이동\r\n      } else {\r\n        // 신규 사용자라면 닉네임 입력 창 띄우기\r\n        setUserInfo({ email, tokenId, provider: 'google' });\r\n        setNicknameModalOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking user:', error);\r\n      alert('로그인에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // Google 로그인 실패 시 호출되는 함수\r\n  const handleGoogleLoginFailure = (error) => {\r\n    console.error('Google Login Failed:', error);\r\n    alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\r\n  };\r\n\r\n  // Kakao 로그인 성공 시 호출되는 함수\r\n  const handleKakaoLoginSuccess = async (response) => {\r\n    console.log('Kakao Login Success:', response);\r\n\r\n    const email = response.response.email;\r\n    try {\r\n      // 사용자 정보 확인 요청\r\n      const result = await axios.post(\r\n        'http://localhost:8888/api/login/check-user',\r\n        { email, provider: 'kakao' },\r\n        { withCredentials: true }\r\n      );\r\n\r\n      if (result.data.exists) {\r\n        // 이미 가입된 사용자라면 캘린더 페이지로 이동\r\n        alert('기존 회원입니다. 캘린더로 이동합니다.');\r\n        navigate('/calendar'); // 캘린더 페이지로 이동\r\n      } else {\r\n        // 신규 사용자라면 닉네임 입력 창 띄우기\r\n        const nickname = response.response.properties.nickname;\r\n        setUserInfo({ email, provider: 'kakao', nickname });\r\n        setNicknameModalOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking user:', error);\r\n      alert('로그인에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // Kakao 로그인 실패 시 호출되는 함수\r\n  const handleKakaoLoginFailure = (error) => {\r\n    console.error('Kakao Login Failed:', error);\r\n    alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\r\n  };\r\n\r\n  // 닉네임 중복 검사 및 사용자 정보 저장\r\n  const handleNicknameSubmit = async () => {\r\n    try {\r\n      // 닉네임 중복 검사\r\n      const result = await axios.post('http://localhost:8888/api/login/check-nickname', { nickname }, { withCredentials: true });\r\n\r\n      if (result.data.exists) {\r\n        alert('이미 사용 중인 닉네임입니다. 다른 닉네임을 선택하세요.');\r\n      } else {\r\n        // 중복되지 않으면 사용자 정보 저장\r\n        const userData = { ...userInfo, nickname };\r\n\r\n        if (userInfo.provider === 'google') {\r\n          await axios.post('http://localhost:8888/api/login/google', userData);\r\n        } else if (userInfo.provider === 'kakao') {\r\n          await axios.post('http://localhost:8888/api/login/kakao', userData);\r\n        }\r\n\r\n        alert('회원가입이 완료되었습니다.');\r\n        setNicknameModalOpen(false); // 닉네임 입력창 닫기\r\n        navigate('/calendar'); // 캘린더 페이지로 이동\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving nickname:', error);\r\n      alert('회원가입에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // 닉네임 입력 변경 핸들러\r\n  const handleNicknameChange = (event) => {\r\n    setNickname(event.target.value);\r\n  };\r\n\r\n  // 카카오 SDK 초기화\r\n  useEffect(() => {\r\n    if (window.Kakao) {\r\n      window.Kakao.init('ae86decbc5071f303518b916484a7076'); // 카카오 REST API 키\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Login Page</h2>\r\n\r\n      {/* Google 로그인 버튼 */}\r\n      <GoogleLogin\r\n        onSuccess={handleGoogleLoginSuccess}\r\n        onError={handleGoogleLoginFailure}\r\n        theme=\"outline\"\r\n      />\r\n\r\n      {/* Kakao 로그인 버튼 */}\r\n      <KakaoLogin\r\n        jsKey=\"ae86decbc5071f303518b916484a7076\"\r\n        onSuccess={handleKakaoLoginSuccess}\r\n        onFailure={handleKakaoLoginFailure}\r\n        buttonText=\"Kakao Login\"\r\n      />\r\n\r\n      {/* 닉네임 입력창 */}\r\n      {isNicknameModalOpen && (\r\n        <div className=\"nickname-modal\">\r\n          <h3>닉네임을 입력해주세요</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={nickname}\r\n            onChange={handleNicknameChange}\r\n            placeholder=\"닉네임\"\r\n          />\r\n          <button onClick={handleNicknameSubmit}>확인</button>\r\n          <button onClick={() => setNicknameModalOpen(false)}>취소</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}