{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minju\\\\git\\\\todolist_front\\\\todolist\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { GoogleLogin } from '@react-oauth/google';\nimport KakaoLogin from 'react-kakao-login'; // 카카오 로그인 컴포넌트\nimport axios from 'axios'; // axios 임포트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  // Google 로그인 성공 시 호출되는 함수\n  const handleGoogleLoginSuccess = async response => {\n    console.log('Google Login Success:', response);\n    try {\n      // 구글 로그인 후 사용자 정보 서버로 전달\n      const result = await axios.post('/api/login/google', {\n        tokenId: response.credential,\n        // 구글 로그인 토큰\n        email: response.email,\n        // 구글 이메일\n        nickname: response.given_name // 구글 사용자 이름\n      });\n\n      // 로그인 후 처리\n      console.log('User info saved to DB:', result.data);\n      // 로그인 후 다른 페이지로 이동하거나 UI 업데이트 등을 처리할 수 있습니다.\n    } catch (error) {\n      console.error('Error during Google login:', error);\n      alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // Google 로그인 실패 시 호출되는 함수\n  const handleGoogleLoginFailure = error => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\n  };\n\n  // Kakao 로그인 성공 시 호출되는 함수\n  const handleKakaoLoginSuccess = async response => {\n    console.log('Kakao Login Success:', response);\n    try {\n      // 카카오 로그인 후 사용자 정보 서버로 전달\n      const result = await axios.post('http://localhost:8888api/login/kakao', {\n        tokenId: response.response.id,\n        // 카카오 로그인 토큰 ID\n        email: response.response.email,\n        // 카카오 이메일\n        nickname: response.response.properties.nickname // 카카오 사용자 이름\n      });\n\n      // 로그인 후 처리\n      console.log('User info saved to DB:', result.data);\n      // 로그인 후 다른 페이지로 이동하거나 UI 업데이트 등을 처리할 수 있습니다.\n    } catch (error) {\n      console.error('Error during Kakao login:', error);\n      alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\n    }\n  };\n\n  // Kakao 로그인 실패 시 호출되는 함수\n  const handleKakaoLoginFailure = error => {\n    console.error('Kakao Login Failed:', error);\n    alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\n  };\n\n  // 카카오 SDK 초기화\n  useEffect(() => {\n    if (window.Kakao) {\n      window.Kakao.init('ae86decbc5071f303518b916484a7076'); // 카카오 REST API 키\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleGoogleLoginSuccess,\n      onError: handleGoogleLoginFailure,\n      theme: \"outline\" // 버튼 스타일 설정 (예: outline)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KakaoLogin, {\n      jsKey: \"ae86decbc5071f303518b916484a7076\" // 카카오 REST API 키\n      ,\n      onSuccess: handleKakaoLoginSuccess,\n      onFailure: handleKakaoLoginFailure,\n      buttonText: \"Kakao Login\" // 버튼 텍스트 설정\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useEffect","GoogleLogin","KakaoLogin","axios","jsxDEV","_jsxDEV","LoginPage","_s","handleGoogleLoginSuccess","response","console","log","result","post","tokenId","credential","email","nickname","given_name","data","error","alert","handleGoogleLoginFailure","handleKakaoLoginSuccess","id","properties","handleKakaoLoginFailure","window","Kakao","init","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","theme","jsKey","onFailure","buttonText","_c","$RefreshReg$"],"sources":["C:/Users/minju/git/todolist_front/todolist/src/Login.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport KakaoLogin from 'react-kakao-login'; // 카카오 로그인 컴포넌트\r\nimport axios from 'axios'; // axios 임포트\r\n\r\nconst LoginPage = () => {\r\n  // Google 로그인 성공 시 호출되는 함수\r\n  const handleGoogleLoginSuccess = async (response) => {\r\n    console.log('Google Login Success:', response);\r\n    \r\n    try {\r\n      // 구글 로그인 후 사용자 정보 서버로 전달\r\n      const result = await axios.post('/api/login/google', {\r\n        tokenId: response.credential,  // 구글 로그인 토큰\r\n        email: response.email,         // 구글 이메일\r\n        nickname: response.given_name, // 구글 사용자 이름\r\n      });\r\n\r\n      // 로그인 후 처리\r\n      console.log('User info saved to DB:', result.data);\r\n      // 로그인 후 다른 페이지로 이동하거나 UI 업데이트 등을 처리할 수 있습니다.\r\n    } catch (error) {\r\n      console.error('Error during Google login:', error);\r\n      alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // Google 로그인 실패 시 호출되는 함수\r\n  const handleGoogleLoginFailure = (error) => {\r\n    console.error('Google Login Failed:', error);\r\n    alert('Google 로그인에 실패했습니다. 다시 시도해주세요.');\r\n  };\r\n\r\n  // Kakao 로그인 성공 시 호출되는 함수\r\n  const handleKakaoLoginSuccess = async (response) => {\r\n    console.log('Kakao Login Success:', response);\r\n\r\n    try {\r\n      // 카카오 로그인 후 사용자 정보 서버로 전달\r\n      const result = await axios.post('http://localhost:8888api/login/kakao', {\r\n        tokenId: response.response.id,  // 카카오 로그인 토큰 ID\r\n        email: response.response.email, // 카카오 이메일\r\n        nickname: response.response.properties.nickname, // 카카오 사용자 이름\r\n      });\r\n\r\n      // 로그인 후 처리\r\n      console.log('User info saved to DB:', result.data);\r\n      // 로그인 후 다른 페이지로 이동하거나 UI 업데이트 등을 처리할 수 있습니다.\r\n    } catch (error) {\r\n      console.error('Error during Kakao login:', error);\r\n      alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  // Kakao 로그인 실패 시 호출되는 함수\r\n  const handleKakaoLoginFailure = (error) => {\r\n    console.error('Kakao Login Failed:', error);\r\n    alert('Kakao 로그인에 실패했습니다. 다시 시도해주세요.');\r\n  };\r\n\r\n  // 카카오 SDK 초기화\r\n  useEffect(() => {\r\n    if (window.Kakao) {\r\n      window.Kakao.init('ae86decbc5071f303518b916484a7076'); // 카카오 REST API 키\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Login Page</h2>\r\n      \r\n      {/* Google 로그인 버튼 */}\r\n      <GoogleLogin\r\n        onSuccess={handleGoogleLoginSuccess}\r\n        onError={handleGoogleLoginFailure}\r\n        theme=\"outline\" // 버튼 스타일 설정 (예: outline)\r\n      />\r\n\r\n      {/* Kakao 로그인 버튼 */}\r\n      <KakaoLogin\r\n        jsKey=\"ae86decbc5071f303518b916484a7076\" // 카카오 REST API 키\r\n        onSuccess={handleKakaoLoginSuccess}\r\n        onFailure={handleKakaoLoginFailure}\r\n        buttonText=\"Kakao Login\" // 버튼 텍스트 설정\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}